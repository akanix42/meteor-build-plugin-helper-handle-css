{"version":3,"sources":["handle-css.js"],"names":["monkeyPatchToHandleCssExtension","Plugin","packageName","registerCompiler","registerSourceProcessor","_registerSourceProcessor","options","factory","sourceProcessorSet","methodName","featurePackage","buildPluginMerge","constructor","prototype","merge","otherSet","_myPackageDisplayName","_byExtension","previouslyRegisteredSourceProcessor","css","isopack","displayName","allSourceProcessors","splice","indexOf","call","arguments"],"mappings":";;;;;kBAGwBA,+B;AAHxB;;;AAGe,SAASA,+BAAT,CAAyCC,MAAzC,EAAiDC,WAAjD,EAA8DC,gBAA9D,EAAgF;AAC7F,MAAMC,0BAA0BH,OAAOI,wBAAvC;AACAJ,SAAOI,wBAAP,GAAkC,UAASC,OAAT,EAAkBC,OAAlB,QAA+E;AAAA,QAAlDC,kBAAkD,QAAlDA,kBAAkD;AAAA,QAA9BC,UAA8B,QAA9BA,UAA8B;AAAA,QAAlBC,cAAkB,QAAlBA,cAAkB;;AAC/G,QAAMC,mBAAmBH,mBAAmBI,WAAnB,CAA+BC,SAA/B,CAAyCC,KAAlE;AACAN,uBAAmBI,WAAnB,CAA+BC,SAA/B,CAAyCC,KAAzC,GAAiD,UAASC,QAAT,EAAmBT,OAAnB,EAA4B;AAC3E;;;AAGA,UAAIS,SAASC,qBAAT,KAAmC,QAAnC,IAA+C,EAAE,SAAS,KAAKC,YAAhB,CAAnD,EAAkF;AAChF;;;AAGA,YAAK,SAAS,KAAKA,YAAf,IAAgC,SAASF,SAASE,YAAtD,EAAoE;AAClE,cAAMC,sCAAsC,KAAKD,YAAL,CAAkBE,GAAlB,CAAsB,CAAtB,CAA5C;AACA,cAAID,oCAAoCE,OAApC,CAA4CC,WAA5C,OAA8D,QAA9D,IAA0EN,SAASC,qBAAT,KAAmCd,WAAjH,EAA8H;AAC5H,iBAAKoB,mBAAL,CAAyBC,MAAzB,CAAgC,KAAKD,mBAAL,CAAyBE,OAAzB,CAAiCN,mCAAjC,CAAhC,EAAuG,CAAvG;AACA,mBAAO,KAAKD,YAAL,CAAkBE,GAAzB;AACD;AACF;AACDR,yBAAiBc,IAAjB,0BAAsB,IAAtB,oCAA+BC,SAA/B;AACD;AACF,KAjBD;AAkBAtB,4BAAwBE,OAAxB,EAAiCC,OAAjC,EAA0C,EAAEC,sCAAF,EAAsBC,sBAAtB,EAAkCC,8BAAlC,EAA1C;AACD,GArBD;;AAuBAP;;AAEAF,SAAOI,wBAAP,GAAkCD,uBAAlC;AACD","file":"handle-css.js","sourcesContent":["/**\r\n * Monkey patch _registerSourceProcessor and SourceProcessorSet.merge so we can block the default CSS compiler\r\n */\r\nexport default function monkeyPatchToHandleCssExtension(Plugin, packageName, registerCompiler) {\r\n  const registerSourceProcessor = Plugin._registerSourceProcessor;\r\n  Plugin._registerSourceProcessor = function(options, factory, { sourceProcessorSet, methodName, featurePackage }) {\r\n    const buildPluginMerge = sourceProcessorSet.constructor.prototype.merge;\r\n    sourceProcessorSet.constructor.prototype.merge = function(otherSet, options) {\r\n      /* If a css plugin handler has already been added,\r\n       * don't merge the meteor package, which only includes the 'css' package\r\n       */\r\n      if (otherSet._myPackageDisplayName !== 'meteor' || !('css' in this._byExtension)) {\r\n        /* If we're using our CSS handler inside of a package, it's possible that Meteor's CSS build plugin got merged\r\n         * before we could block it. In that case, unregister the Meteor CSS processor.\r\n         */\r\n        if (('css' in this._byExtension) && 'css' in otherSet._byExtension) {\r\n          const previouslyRegisteredSourceProcessor = this._byExtension.css[0];\r\n          if (previouslyRegisteredSourceProcessor.isopack.displayName() === 'meteor' && otherSet._myPackageDisplayName === packageName) {\r\n            this.allSourceProcessors.splice(this.allSourceProcessors.indexOf(previouslyRegisteredSourceProcessor), 1);\r\n            delete this._byExtension.css;\r\n          }\r\n        }\r\n        buildPluginMerge.call(this, ...arguments);\r\n      }\r\n    };\r\n    registerSourceProcessor(options, factory, { sourceProcessorSet, methodName, featurePackage });\r\n  };\r\n\r\n  registerCompiler();\r\n\r\n  Plugin._registerSourceProcessor = registerSourceProcessor;\r\n}\r\n"]}